/*
   g++ --std=c++0x -g -I../install/include -I. RMCLoadTestMultiThreaded.cpp  -o RMCLoadTestMultiThreaded.out -L../install/bin -lramcloud -Wl,-rpath=../install/bin -pthread
 */


#define RUN_TIME 10
#define THREAD_COUNT 20
//#define IP "10.129.26.81"
//#define PORT "11100"
#define IP "10.129.28.44"
#define PORT "7003"
// #define PORT "8090"

#define SRAND_ON 0

// #include "../../Implementation/RAMCloud/client/src/KVStore.h"
#include <iostream>
#include <thread>
#include <stdio.h>
#include <cstdlib> //rand()
#include <vector>
#include <cstring>
#include <string>
#include <ctime>
#include <unistd.h>
#include <chrono>
#include <sstream>  // stringstream
#include "TestUtils.h"
#include "KVImplementation.h"
// #include "MessageClient.cpp"
// #include "ramcloud/RamCloud.h"

// #ifdef REDIS
//   #include <redis>
//   using namespace kvstore;
// #endif /* REDIS */

using namespace std;
using namespace std::chrono;
// using namespace RAMCloud;
// using namespace kvstore;
// using namespace MessageClientNS;

#ifdef DEFAULTIMPL
  class KVImplementation {
  public:
    bool bind(string ip, string port){return false;}
    bool put(string key, string value){return false;}
    string get(string key){return "Err";}
  };
#endif


#ifdef MDEBUG
 #define TRACE(x) {x}
#else
 #define TRACE(x) {}
#endif




class Experiment{
private:
  vector<string> key;
  vector<string> value;
  int thread_count;
  int run_time;
  double readp;
  int dataSz;
  vector<Measure> m;
  bool run;
public:
  Experiment(vector<string> &k, vector<string> &v,int tc,int rt){
    key = k;
    value = v;
    dataSz = k.size();
    thread_count = tc;
    run_time = rt;
    readp = 0.5;
    m.resize(tc);
    run = false;
    loadData(); //? to be invoked here or not?
  }
  void setRuntime(int rt){
    run_time = rt;
  }
  void setThreadCount(int tc){
    thread_count = tc;
    m.resize(tc);
  }
  void setData(vector<string> &k, vector<string> &v) {
    key = k;
    value = v;
    dataSz = k.size();
    loadData(); //? to be invoked here or not?
  }
  void loadData(){
    KVImplementation k;
    k.bind(IP,PORT);
    for(int i=0;i<dataSz;i++){
      if(!k.put(key[i],value[i])){
        cerr << "Failure in loading data at index "<<i<<endl;
      }
    }
  }
  void setReadProb(double rp){
    readp = rp;
  }

  void worker(int id, KVImplementation k){
    double rp = readp * RAND_MAX;
    int r1,r2;
    bool succ;
    string val;

    // string key = "Key"+to_string(tid);
    while(!run);
    TRACE(cout<<"Tid "<<tid<<" started"<<endl;)
    while(run){
      r1 = rand();
      r2 = rand() % dataSz;

      if(r1<rp){
        //Do read
        m[id].start();
        val = k.get(key[r2]);
        m[id].end();
        if(val != value[r2]){
          m[id].incfcount();
        }
      } else {
        //Do Write
        m[id].start();
        succ = k.put(key[r2],value[r2]);
        m[id].end();
        if(!succ){
          m[id].incfcount();
        }
      }
    }
    TRACE(cout<<"Tid "<<tid<<" ended"<<endl;)
  }

  void runExperiment(string desc="No description provided."){
    vector<thread> td(thread_count);
    run = false;
    for(int i=0;i<thread_count;i++){
      m[i].reset();
      KVImplementation k;
      k.bind(IP,PORT);
      td[i] = thread(&Experiment::worker,this,i,k);
    }
    run=true;
    sleep(run_time);
    // cout<<"Timer Expired"<<endl;
    run=false;
    for (int i = 0; i < thread_count; i++) {
      if (td[i].joinable()) {
        td[i].join();
      }
    }

    Measure merged;
    merged.mergeAll(m);
    string filename = "FileName";
    merged.saveToFile(desc,filename);
    merged.print(desc);
  }

};



void pinThreadToCPU(thread *th,int i){
  long num_cpus;
  cpu_set_t cpuset;
  int rc;
  num_cpus = std::thread::hardware_concurrency();
  CPU_ZERO(&cpuset);
  CPU_SET(i%num_cpus, &cpuset);
  rc = pthread_setaffinity_np(th->native_handle(), sizeof(cpu_set_t), &cpuset);
  if (rc != 0) {
  	std::cerr << "Error calling pthread_setaffinity_np: " << rc << "\n";
  }
}

class DataSetGenerator{
public:
  // //100 B
  // string value100 = "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789";
  // //500 B
  // string value500 = "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789";
  // //1 KB
  // string value1K = "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789";
  // //2 KB
  // string value2K = "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789";
  // //10 KB
  // string value

  static string getRandomString(int len){
    string ret(len,'0');
    for(int i=0;i<len;i++){
      ret[i] = '0'+rand()%75;
    }
    return ret;
  }

  static vector<string> getUniform(int sz, int len){
    vector<string> ret;
    for(int i=0;i<sz;i++){
      ret.push_back(getRandomString(len));
    }
    return ret;
  }
};

int main(int argc, char *argv[]){
  if(SRAND_ON){
    srand(time(NULL));
  }
  vector<string> key = DataSetGenerator::getUniform(1000,10);
  vector<string> value = DataSetGenerator::getUniform(1000,1000);

  int thread_count = 2;
  int run_time = 20;
  Experiment e = Experiment(key,value,thread_count,run_time);
  e.runExperiment("50-50");
  e.setReadProb(1);
  e.runExperiment("Only Read");
  e.setReadProb(0);
  e.runExperiment("Only write");
  return 0;
}
